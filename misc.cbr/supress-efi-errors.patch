diff --git a/disk/part_efi.c b/disk/part_efi.c
index b2e157d9c1..e7dd29e9a4 100644
--- a/disk/part_efi.c
+++ b/disk/part_efi.c
@@ -86,10 +86,10 @@ static int validate_gpt_header(gpt_header *gpt_h, lbaint_t lba,
 
 	/* Check the GPT header signature */
 	if (le64_to_cpu(gpt_h->signature) != GPT_HEADER_SIGNATURE_UBOOT) {
-		printf("%s signature is wrong: 0x%llX != 0x%llX\n",
+	/*	printf("%s signature is wrong: 0x%llX != 0x%llX\n",
 		       "GUID Partition Table Header",
 		       le64_to_cpu(gpt_h->signature),
-		       GPT_HEADER_SIGNATURE_UBOOT);
+		       GPT_HEADER_SIGNATURE_UBOOT); */
 		return -1;
 	}
 
@@ -959,7 +959,7 @@ static int is_gpt_valid(struct blk_desc *dev_desc, u64 lba,
 	/* Read and allocate Partition Table Entries */
 	*pgpt_pte = alloc_read_gpt_entries(dev_desc, pgpt_head);
 	if (*pgpt_pte == NULL) {
-		printf("GPT: Failed to allocate memory for PTE\n");
+		/* printf("GPT: Failed to allocate memory for PTE\n"); */
 		return 0;
 	}
 
@@ -995,13 +995,13 @@ static int find_valid_gpt(struct blk_desc *dev_desc, gpt_header *gpt_head,
 
 		if (is_gpt_valid(dev_desc, (dev_desc->lba - 1), gpt_head,
 				 pgpt_pte) != 1) {
-			printf("%s: *** ERROR: Invalid Backup GPT ***\n",
-			       __func__);
+/*			printf("%s: *** ERROR: Invalid Backup GPT ***\n",
+			       __func__); */
 			return 0;
 		}
-		if (r != 2)
+/*		if (r != 2)
 			printf("%s: ***        Using Backup GPT ***\n",
-			       __func__);
+			       __func__); */
 	}
 	return 1;
 }
